; ModuleID = 'Coala'
source_filename = "Coala"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@"\221. String datatype\22" = private unnamed_addr constant [20 x i8] c"1. String datatype\0A\00", align 1
@"\22Best language is coala !!\22" = private unnamed_addr constant [27 x i8] c"Best language is coala !!\0A\00", align 1
@"\22 \22" = private unnamed_addr constant [3 x i8] c" \0A\00", align 1
@"\22---------------------------------------\22" = private unnamed_addr constant [41 x i8] c"---------------------------------------\0A\00", align 1
@"\22 \22.2" = private unnamed_addr constant [3 x i8] c" \0A\00", align 1
@"\222. Char datatype\22" = private unnamed_addr constant [18 x i8] c"2. Char datatype\0A\00", align 1
@"'$'" = private unnamed_addr constant [3 x i8] c"$\0A\00", align 1
@"\22 \22.3" = private unnamed_addr constant [3 x i8] c" \0A\00", align 1
@"\22---------------------------------------\22.4" = private unnamed_addr constant [41 x i8] c"---------------------------------------\0A\00", align 1
@"\22 \22.5" = private unnamed_addr constant [3 x i8] c" \0A\00", align 1
@"\223. Negative Int and Float datatypes\22" = private unnamed_addr constant [37 x i8] c"3. Negative Int and Float datatypes\0A\00", align 1

declare i32 @printf(i8*, ...)

define void @main() {
entry:
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"\221. String datatype\22", i32 0, i32 0))
  %s = alloca i8*
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"\22Best language is coala !!\22", i32 0, i32 0), i8** %s
  %s1 = load i8*, i8** %s
  %printf2 = call i32 (i8*, ...) @printf(i8* %s1)
  %printf3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"\22 \22", i32 0, i32 0))
  %printf4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"\22---------------------------------------\22", i32 0, i32 0))
  %printf5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"\22 \22.2", i32 0, i32 0))
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"\222. Char datatype\22", i32 0, i32 0))
  %c = alloca i8*
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"'$'", i32 0, i32 0), i8** %c
  %c7 = load i8*, i8** %c
  %printf8 = call i32 (i8*, ...) @printf(i8* %c7)
  %printf9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"\22 \22.3", i32 0, i32 0))
  %printf10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"\22---------------------------------------\22.4", i32 0, i32 0))
  %printf11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"\22 \22.5", i32 0, i32 0))
  %printf12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"\223. Negative Int and Float datatypes\22", i32 0, i32 0))
  %i = alloca i32
  store i32 -28, i32* %i
  %f = alloca double
  store double -6.101000e+00, double* %f
  %i13 = load i32, i32* %i
  %printf14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %i13)
  %f15 = load double, double* %f
  %printf16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %f15)
  ret void
}
